@namespace("sunnylabs.report")
protocol Reporting {

  enum DataType {
    DOUBLE, LONG, STRING, NUMERICAL
  }

  enum HistogramType {
    TDIGEST, DOUBLE_TRUNCATE
  }

  record Histogram {
    // Number of milliseconds that samples cover
    int duration;
    // Histogram is a list of sample bins and counts
    HistogramType type;
    array<double> bins;
    array<int> counts;
  }

  record ReportPoint {
    string metric;
    // Milliseconds since 1970
    long timestamp;
    union { double, long, string, Histogram } value;
    string host = "unknown";
    string table = "tsdb";
    map<string> annotations = {};
  }

  // The parts of a ReportPoint that uniquely identify a timeseries to wavefront.
  record TimeSeries {
    string metric;
    string host = "unknown";
    string table = "tsdb";
    @java-class("java.util.TreeMap") map<string> annotations = {};
  }

  record IndexUpdate {
    string table;
    bytes metricKey;
    bytes hostKey;
    array<bytes> tagIds;
    long timestamp;
  }

  record ReportSourceTag {
    string sourceTagLiteral; // constant '@SourceTag' or '@SourceDescription'
    string action; // can be either 'save' or 'delete'
    string source;
    string description = null; // might be null
    array<string> annotations = {}; // might be empty
  }

  @javaAnnotation("com.wavefront.data.Idempotent")
  void reportPoint(ReportPoint point);
  @javaAnnotation("com.wavefront.data.Idempotent")
  void reportPoints(array<ReportPoint> points);
  @javaAnnotation("com.wavefront.data.Idempotent")
  void updateMetricHostTagsIndex(string table, bytes metricKey, bytes hostKey, array<bytes> tagIds, long timestamp);
  @javaAnnotation("com.wavefront.data.Idempotent")
  void updateMetricHostTagsIndices(array<IndexUpdate> indexUpdates);
  @javaAnnotation("com.wavefront.data.Idempotent")
  void reportSourceTag(ReportSourceTag sourceTag);
  @javaAnnotation("com.wavefront.data.Idempotent")
  void reportSourceTags(array<ReportSourceTag> sourceTags);
}